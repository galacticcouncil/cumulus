// Copyright 2022 Parity Technologies (UK) Ltd.
// This file is part of Cumulus.

// Cumulus is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Cumulus is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Cumulus.  If not, see <http://www.gnu.org/licenses/>.


//! Autogenerated weights for `cumulus_pallet_xcmp_queue`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-19, STEPS: `20`, REPEAT: 40, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bench-bot`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("westmint-dev"), DB CACHE: 1024

// Executed Command:
// target/release/polkadot-parachain
// benchmark
// pallet
// --chain=westmint-dev
// --steps=20
// --repeat=40
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=templates/xcm-bench-template.hbs
// --pallet=cumulus_pallet_xcmp_queue
// --output=weights.rs
// --extrinsic=*

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weights for `cumulus_pallet_xcmp_queue`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo<T> {
	// Storage: XcmpQueue QueueConfig (r:1 w:1)
	// Proof Skipped: XcmpQueue QueueConfig (max_values: Some(1), max_size: None, mode: Measured)
	pub(crate) fn set_config_with_u32() -> Weight {
		Weight::from_ref_time(8_036_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XcmpQueue QueueConfig (r:1 w:1)
	// Proof Skipped: XcmpQueue QueueConfig (max_values: Some(1), max_size: None, mode: Measured)
	pub(crate) fn set_config_with_weight() -> Weight {
		Weight::from_ref_time(8_038_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Proof Skipped: ParachainSystem ValidationData (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmpQueue QueueConfig (r:1 w:0)
	// Proof Skipped: XcmpQueue QueueConfig (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmpQueue QueueSuspended (r:1 w:0)
	// Proof Skipped: XcmpQueue QueueSuspended (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmpQueue DeferredIndices (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredIndices (max_values: None, max_size: None, mode: Measured)
	// Storage: XcmpQueue DeferredMessageBuckets (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredMessageBuckets (max_values: None, max_size: None, mode: Measured)
	// Storage: XcmpQueue CounterForOverweight (r:1 w:1)
	// Proof: XcmpQueue CounterForOverweight (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: XcmpQueue OverweightCount (r:1 w:1)
	// Proof Skipped: XcmpQueue OverweightCount (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: XcmpQueue Overweight (r:100 w:100)
	// Proof Skipped: XcmpQueue Overweight (max_values: None, max_size: None, mode: Measured)
	pub(crate) fn service_deferred() -> Weight {
		Weight::from_ref_time(221_105_465_000 as u64)
			.saturating_add(T::DbWeight::get().reads(107 as u64))
			.saturating_add(T::DbWeight::get().writes(104 as u64))
	}
	// Storage: XcmpQueue DeferredMessageBuckets (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredMessageBuckets (max_values: None, max_size: None, mode: Measured)
	pub(crate) fn discard_deferred_bucket() -> Weight {
		Weight::from_ref_time(149_864_999_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XcmpQueue DeferredMessageBuckets (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredMessageBuckets (max_values: None, max_size: None, mode: Measured)
	pub(crate) fn discard_deferred_individual() -> Weight {
		Weight::from_ref_time(161_216_156_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: XcmpQueue DeferredIndices (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredIndices (max_values: None, max_size: None, mode: Measured)
	// Storage: XcmpQueue DeferredMessageBuckets (r:1 w:1)
	// Proof Skipped: XcmpQueue DeferredMessageBuckets (max_values: None, max_size: None, mode: Measured)
	pub(crate) fn try_place_in_deferred_queue() -> Weight {
		Weight::from_ref_time(510_298_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}